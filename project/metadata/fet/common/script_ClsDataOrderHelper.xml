<?xml version="1.0" encoding="UTF-8" ?>
<script name="fet.common.ClsDataOrderHelper">
  <group>on</group>
  <label>ClsDataOrderHelper</label>
  <metaVersion>24</metaVersion>
  <script><![CDATA[
    /**
    * @description This class provides a warper and a link to Data Order & Catalog Basket
    * @param      {order} order instance of Data Order
    * @returns
    * @author     Karl Que
    * @version
    */

    this.order = null;
    this.basket = null;
    this.objectsGUID = null;
    this.clsInterface = fet.common.getClsInterface();

    this.initial = function() {
        this.createOrderAndBasket();
        this.remapGUIDs();
    };

    this.getObjectByGUID = function(guid) {
        return this.objectsGUID[guid];
    }

    this.addItem = function(itemCode, siteId, parentItem, termValue, accountId, newStatus, effectiveDate, isUpgrade) {
        var basketItems = this.basket.add(itemCode);
        if (basketItems instanceof ErrorList) {
            Global.throwException(basketItems.message());
        }

        var source;
        // set GUID
        for (var i = 0 ; i < basketItems.length ; i ++) {
            if (basketItems[i].catalogItem.getItemCode() == itemCode) {
                source = basketItems[i];
            }
            basketItems[i].guid = basketItems[i].basketitemid + '-';
            this.objectsGUID[basketItems[i].guid] = basketItems[i];
        }

        //Add relationship by catalog definded
        for (var i = 0 ; i < this.basket.length ; i ++) {
            var basketItem = this.basket[i];
            var catalogItemItem = basketItem.catalogItem.findAssociation(source.code);
            if (catalogItemItem) {
                var relationType = catalogItemItem.getAssociationType();
                this.basket.createRelation(basketItem._id, source._id, relationType);
            }
        }

        //Add relationship (type:contain)
        for (var i = 0 ; i < basketItems.length ; i ++) {
            var basketItem = basketItems[i];
            basketItem.state = newStatus ? newStatus : this.clsInterface.getInitialStatus();
            var parentBasketItem = basketItem.parent;
            if (basketItem.code != itemCode) {
                this.basket.createRelation(parentBasketItem._id, basketItem._id, relationType);
            }
        }

        this.save();
        return source;
    };

    this.removeItem = function(basketItemId){
        var basketItem = this.basket.getItemById(basketItemId);
        var sourceRelations = this.getSourceRelationsForItem(basketItem);
        for (var i = 0 ; sourceRelations && i < sourceRelations.length ; i ++) {
            this.removeRelationByValue(sourceRelations[i]);
        }

        var relations = this.getTargetRelationsForItem(basketItem);
        for (var i = 0 ; relations && i < relations.length ; i ++) {
            var child = this.basket.getItemById(relations[i].basketItemIdTo);
            if (child != null) {
                this.removeItem(child._id);
            }
            this.removeRelationByValue(relations[i]);
        }

        var errorList = this.basket.forcedRemove(basketItem, true);

        this.save();
        return errorList;
    }

    this.removeRelationByValue= function(rel) {
        this.basket.deleteRelation(rel);
    };

    this.getTargetRelationsForItem= function(basketItem) {
        var rels = this.basket.getTargetRelations(basketItem);
        return rels;
    };

    this.getSourceRelationsForItem = function(basketItem) {
        var rels = this.basket.getSourceRelations(basketItem);
        return rels;
    };

    this.createOrderAndBasket = function() {
        this.order = new fet.on.order.order();
        this.basket = this.order.ShoppingBasket;
    };

    this.getOrderById = function(orderid) {
        this.order = Order.getOrderById(orderid);
        this.basket = this.order.ShoppingBasket;
    };

    this.remapGUIDs = function() {
        this.objectsGUID = new Array();
        var basketItems = this.getAllItemsInBasket();
        for (var i = 0 ; basketItems && i < basketItems.length ; i ++) {
            this.objectsGUID[basketItems[i].guid] = basketItems[i];
        }
    };



    this.getAllItemsInBasket = function() {
        return this.basket.toArrayOfItems();
    };

    this.save = function() {
        this.basket.storeInDB();
        this.order.save();
    };

    this.CON_RELATION_SCOPE = 'scope';

    this.initial();
  ]]></script>
</script>